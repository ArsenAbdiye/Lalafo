import django
from django.core.management.base import BaseCommand
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

django.setup()

from apps.items.models import SubSubCategory,Category,SubCategory,Ad,AdImage  
from lalafo import settings  

bot = telebot.TeleBot(settings.BOT_TOKEN)


def create_pagination_markup(current_page, total_pages, callback_prefix):
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = []

    if current_page > 1:
        buttons.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"{callback_prefix}_{current_page - 1}"
        ))
    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(
            "‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"{callback_prefix}_{current_page + 1}"
        ))

    if buttons:
        markup.add(*buttons)
    return markup


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="latest_ads_page_1"),
        InlineKeyboardButton("üìÇ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="filter_categories"),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="search_command")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "search_command")
def handle_search_callback(call):
    msg = bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_search_query)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("latest_ads_page_"))
def handle_latest_ads(call):
    try:
        page = int(call.data.split("_")[-1])
    except (IndexError, ValueError):
        page = 1

    ads_per_page = 5
    ads = Ad.objects.all().order_by('-created_at')
    total_ads = ads.count()
    total_pages = (total_ads + ads_per_page - 1) // ads_per_page

    start = (page - 1) * ads_per_page
    end = start + ads_per_page
    ads_to_show = ads[start:end]

    for ad in ads_to_show:
        image = AdImage.objects.filter(ad=ad).first()
        ad_link = settings.AD_LINK_TEMPLATE.format(ad_id=ad.id)
        caption = (
            f"{ad.description}\n"
            f"–¶–µ–Ω–∞: {ad.price} {ad.currency}\n"
            f"<a href='{ad_link}'>üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
        )

        if image:
            with open(image.image.path, 'rb') as img_file:
                bot.send_photo(
                    call.message.chat.id, 
                    img_file, 
                    caption=caption,
                    parse_mode='HTML'
                )
        else:
            bot.send_message(
                call.message.chat.id, 
                caption,
                parse_mode='HTML'
            )

    pagination_markup = create_pagination_markup(
        current_page=page,
        total_pages=total_pages,
        callback_prefix="latest_ads_page"
    )
    
    if pagination_markup.keyboard:
        bot.send_message(call.message.chat.id, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=pagination_markup)


@bot.callback_query_handler(func=lambda call: call.data == "filter_categories")
def handle_filter_categories(call):
    categories = Category.objects.all()
    if not categories:
        bot.send_message(call.message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = InlineKeyboardMarkup(row_width=2)
    for category in categories:
        markup.add(InlineKeyboardButton(category.category_name, callback_data=f"cat_{category.id}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def handle_subcategories(call):
    cat_id = int(call.data.split('_')[1])
    subcategories = SubCategory.objects.filter(parent_category_id=cat_id)
    if not subcategories:
        bot.send_message(call.message.chat.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = InlineKeyboardMarkup(row_width=2)
    for subcat in subcategories:
        markup.add(InlineKeyboardButton(subcat.sub_category_name, callback_data=f"subcat_{subcat.id}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("subcat_"))
def handle_subsubcategories(call):
    subcat_id = int(call.data.split('_')[1])
    subsubcategories = SubSubCategory.objects.filter(parent_subcategory_id=subcat_id)
    if not subsubcategories:
        bot.send_message(call.message.chat.id, "–ü–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = InlineKeyboardMarkup(row_width=2)
    for subsubcat in subsubcategories:
        markup.add(InlineKeyboardButton(
            subsubcat.subsub_category_name, 
            callback_data=f"subsubcat_{subsubcat.id}_page_1"
        ))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("subsubcat_"))
def handle_subsub_category_selection(call):
    parts = call.data.split('_')
    subsubcat_id = int(parts[1])
    page = int(parts[3]) if len(parts) > 3 and parts[2] == "page" else 1
    ads_per_page = 5

    try:
        subsubcat = SubSubCategory.objects.get(id=subsubcat_id)
    except SubSubCategory.DoesNotExist:
        bot.send_message(call.message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    ads = Ad.objects.filter(category=subsubcat).order_by('-created_at')
    total_ads = ads.count()
    total_pages = (total_ads + ads_per_page - 1) // ads_per_page

    start = (page - 1) * ads_per_page
    end = start + ads_per_page
    ads_to_show = ads[start:end]

    if not ads_to_show:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    for ad in ads_to_show:
        image = AdImage.objects.filter(ad=ad).first()
        ad_link = settings.AD_LINK_TEMPLATE.format(ad_id=ad.id)
        caption = (
            f"{ad.description}\n"
            f"–¶–µ–Ω–∞: {ad.price} {ad.currency}\n"
            f"<a href='{ad_link}'>üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
        )

        if image:
            with open(image.image.path, 'rb') as img_file:
                bot.send_photo(
                    call.message.chat.id, 
                    img_file, 
                    caption=caption,
                    parse_mode='HTML'
                )
        else:
            bot.send_message(
                call.message.chat.id, 
                caption,
                parse_mode='HTML'
            )

    pagination_markup = create_pagination_markup(
        current_page=page,
        total_pages=total_pages,
        callback_prefix=f"subsubcat_{subsubcat_id}_page"
    )
    
    if pagination_markup.keyboard:
        bot.send_message(call.message.chat.id, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=pagination_markup)


def process_search_query(message):
    search_query = message.text.strip()
    if not search_query:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    send_search_results(message.chat.id, search_query, page=1)



def send_search_results(chat_id, query, page=1):
    ads_per_page = 5
    ads = Ad.objects.filter(description__icontains=query).order_by('-created_at')
    total_ads = ads.count()
    total_pages = (total_ads + ads_per_page - 1) // ads_per_page

    start = (page - 1) * ads_per_page
    end = start + ads_per_page
    ads_to_show = ads[start:end]

    if not ads_to_show:
        bot.send_message(chat_id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    for ad in ads_to_show:
        image = AdImage.objects.filter(ad=ad).first()
        ad_link = settings.AD_LINK_TEMPLATE.format(ad_id=ad.id)
        caption = (
            f"{ad.description}\n"
            f"–¶–µ–Ω–∞: {ad.price} {ad.currency}\n"
            f"<a href='{ad_link}'>üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
        )

        if image:
            with open(image.image.path, 'rb') as img_file:
                bot.send_photo(
                    chat_id,
                    img_file,
                    caption=caption,
                    parse_mode='HTML'
                )
        else:
            bot.send_message(chat_id, caption, parse_mode='HTML')

    pagination_markup = create_pagination_markup(
        current_page=page,
        total_pages=total_pages,
        callback_prefix=f"search_{query.replace(' ', '_')}"
    )
    if pagination_markup.keyboard:
        bot.send_message(chat_id, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=pagination_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("search_"))
def handle_search_pagination(call):
    try:
        *query_parts, page_str = call.data.split("_")
        query = " ".join(query_parts[1:])  
        page = int(page_str)
    except Exception:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    send_search_results(call.message.chat.id, query, page)


class Command(BaseCommand):
    def handle(self, *args, **options):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.infinity_polling()